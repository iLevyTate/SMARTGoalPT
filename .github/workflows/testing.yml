name: Testing

on:
  push:
    branches:
      - main
  pull_request:
jobs:
  Build:
    strategy:
      matrix:
        build_image: ["backend", "frontend"]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Build ${{ matrix.build_image }} container
        uses: docker/build-push-action@v4
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ${{ matrix.build_image }}
          target: prod
          outputs: type=docker,dest=/tmp/{{ matrix.build_image }}.tar
          push: false
          tags: "dev"
      - name: Upload container
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.build_image }}
          path: /tmp/${{ matrix.build_image }}.tar
          retention-days: 1

  backend-linting:
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install just
        uses: taiki-e/install-action@just
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Get full Python version
        id: full-python-version
        run: echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT
      - name: Install Poetry
        run: |
          python -m pip install pipx
          pipx install poetry
      - name: Configure poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
      - name: Cache poetry venv
        uses: actions/cache@v3
        id: poetry-cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Ensure cache is healthy
        if: steps.poetry-cache.outputs.cache-hit == 'true'
        shell: bash
        run: timeout 10s poetry run pip --version || rm -rf .venv
      - name: Install Dependencies
        run: just install-backend
      - name: mypy check
        run: just mypy-ci

  backend-testing:
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install just
        uses: taiki-e/install-action@just
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Get full Python version
        id: full-python-version
        run: echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT
      - name: Install Poetry
        run: |
          python -m pip install pipx
          pipx install poetry
      - name: Configure poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
      - name: Cache poetry venv
        uses: actions/cache@v3
        id: poetry-cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Ensure cache is healthy
        if: steps.poetry-cache.outputs.cache-hit == 'true'
        shell: bash
        run: timeout 10s poetry run pip --version || rm -rf .venv
      - name: Install Dependencies
        run: just install-backend
      - name: Test with pytest
        run: just backend-test-ci

  frontend-linting:
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install just
        uses: taiki-e/install-action@just
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      - name: Install Dependencies
        run: just install-frontend
      - name: Lint
        run: just frontend-lint-ci
      - name: Check
        run: just frontend-check-ci

  frontend-testing:
    needs: Build
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Download backend container
        uses: actions/download-artifact@v3
        with:
          name: backend
          path: /tmp/
      - name: Download frontend container
        uses: actions/download-artifact@v3
        with:
          name: frontend
          path: /tmp/
      - name: Load image
        run: docker load --input /tmp/backend.tar
          docker load --input /tmp/frontend.tar
      - uses: actions/checkout@v3
      - name: Install just
        uses: taiki-e/install-action@just
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      - name: Install Dependencies
        run: just install-frontend
      - name: Playwright install
        run: just playwright-install
      - name: Start Servers
        run: just compose-up-ci
      - name: Frontend Tests
        run: just frontend-test-ci
